import java.util.*;
import java.io.*;

public class Main {
	static int n;
	static int[][] arr;
	static int sum = 10000000;
	static boolean[] used;
    public static void main(String[] args) throws IOException {
         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
         
         n = Integer.parseInt(br.readLine());
         
         arr = new int[n][2];
         used = new boolean[n];
         // 재료들 묶음
         for(int i = 0; i<n; i++) {
        	 StringTokenizer st = new StringTokenizer(br.readLine());
        	 arr[i][0] = Integer.parseInt(st.nextToken()); 
        	 arr[i][1] = Integer.parseInt(st.nextToken()); 
         }
         
         for (int k=1; k<=n; k++) {
        	 backtrack(1, 0, 0, k, 0);
         }
         System.out.println(sum);
    }
    
    /**
     * ss: 신맛은 곱으로 표현하기 때문에 1을 넣어줌
     * bb: 쓴맛은 합으로 표현
     * cnt: k의 갯수까지 반복하기 위해서 재귀할 때마다 cnt + 1
     * k: 1개로 묶을지 2개씩 묶을지 n개씩 묶을지 정하는거임
     * start: 중복을 방지하기 위해서 설정
     */

    public static void backtrack(int ss, int bb, int cnt, int k, int start) {
    	if(cnt == k) {
    		sum = Math.min(Math.abs(ss-bb), sum);
    		return;
    	}
    	for(int i = start; i<n; i++) {
    		if(!used[i]) {
    			used[i] = true;
    			backtrack(ss*arr[i][0], bb+arr[i][1], cnt+1, k, i+1);
    			used[i] = false;
    		}
    	}
    	
    }
}